{"uid":"201cb0fd9f38490d","name":"test_getinfo","fullName":"Test_Case.test_getinformation#test_getinfo","historyId":"515d513d87683b143d7b30454d10b393","time":{"start":1667978803669,"stop":1667978805826,"duration":2157},"status":"failed","statusMessage":"AssertionError: assert ['CHRONIC_KIDNEY_DISEASE'] == 'API Automation'","statusTrace":"def test_getinfo():\n        # API URL\n        UserEndPoint = '/api/information/' + str(Test_Case.test_createinformation.new_id)\n        headers = {'Authorization': Auth + Test_Case.test_login.Bearer_token}\n    \n        # Make Get Request with Payload\n        response = requests.get(baseUrl + UserEndPoint, headers=headers)\n        print(response.json())\n    \n        # Assertion Check\n        json_response = json.loads(response.text)\n        category = jsonpath.jsonpath(json_response, 'category')\n        print(category)\n>       assert category == 'API Automation'\nE       AssertionError: assert ['CHRONIC_KIDNEY_DISEASE'] == 'API Automation'\n\nTest_Case\\test_getinformation.py:24: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert ['CHRONIC_KIDNEY_DISEASE'] == 'API Automation'","statusTrace":"def test_getinfo():\n        # API URL\n        UserEndPoint = '/api/information/' + str(Test_Case.test_createinformation.new_id)\n        headers = {'Authorization': Auth + Test_Case.test_login.Bearer_token}\n    \n        # Make Get Request with Payload\n        response = requests.get(baseUrl + UserEndPoint, headers=headers)\n        print(response.json())\n    \n        # Assertion Check\n        json_response = json.loads(response.text)\n        category = jsonpath.jsonpath(json_response, 'category')\n        print(category)\n>       assert category == 'API Automation'\nE       AssertionError: assert ['CHRONIC_KIDNEY_DISEASE'] == 'API Automation'\n\nTest_Case\\test_getinformation.py:24: AssertionError","steps":[],"attachments":[{"uid":"5793a7958724fb1d","name":"stdout","source":"5793a7958724fb1d.txt","type":"text/plain","size":307}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"parentSuite","value":"Test_Case"},{"name":"suite","value":"test_getinformation"},{"name":"host","value":"DML-56MDLG3"},{"name":"thread","value":"31988-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test_Case.test_getinformation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"201cb0fd9f38490d.json","parameterValues":[]}